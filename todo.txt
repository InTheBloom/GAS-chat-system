とりあえずいまやるべきこと

- 他のページからも参照するスクリプトを分離して、全ページ共通で走らせるinit()を用意する。
- last updatedをもっと賢く用意する。localStorageに保存するオブジェクトをもう少し体系的な感じにする。


initでやりたいこと
- localStorageを利用できるユーザかどうかのチェック -> もしダメならmainを走らせない。

関数をいい感じに分離したりした。
あとはGAS側でいちいちユーザ認証をするようにしたい。

ちょっとテストで書き込んでみて、ファイルサイズ制限が以外にも厳しいことを知った。
-> スレッド別にファイルを分ける実装をしたい。そのために、ハブページに対応するファイルとスレッドで分ける。
スレッド作成クエリが来たらファイルを新しく生成して、そのファイルidをハブページで持つ実装にする。
-> でけた。天才です。すみません。

今の所5分に一回データの自動更新をかけているわけだけど、もう少し賢く更新できるかもしれない。
例えばデータが必要になったときに5分以上経っていたら初めて要求するとか。これは「必要になったとき」の定義がシンドイ感じがするので見送るかもしれない。

-> ついでにmention機能を実装したい。@usernameでメンションすると、GAS側で@を解析してメンション通知をメールに送る。
実装した。メールのチェック機能とかはないので注意して運用する必要がある。サーバ側の返答をどう扱うか(単に全部Errorで受けると今回みたいなケースでかなり面倒なことになることがわかった。)が問題。とりあえず処理順を入れ替えて対応した。

そろそろジャッジシステムとの組み合わせを考えないといけない。
絶対に実装したい機能は、

- 解いた問題集合を保存して、ページの特定の要素に作用する。(チェックマークを出したり、色を変えたり)
- ユーザ名を解いた問題の割合で色付けする。コンテスト方式ではないので重み一律とみなして採点する。(フォーラムでも有効)

これらをやるために、まず問題側に一意の問題IDをつけることにする。(問題の相対パスで管理するとかいう手も考えたけど、これはシステムを分離できる一方、片方の変更に対して弱くなる。IDはかぶらないようにさえ気をつければほとんど邪魔になることはない。)

そして、データベースは、各セッションに提出した/解いた問題集合のオブジェクトを持たせる。
コンフリクトとかが諸々面倒なので、すべてのユーザの分をもたせることにする。これを10分くらいに一回更新かける。(ほとんどすべてのページで更新をかけるようにする。)
提出アクションがあったときにサーバにリザルトを送信して、フェッチする。
あとは諸々をクライアント側で計算してやる。
あとは頑張って実装するだけ。がんばります。
